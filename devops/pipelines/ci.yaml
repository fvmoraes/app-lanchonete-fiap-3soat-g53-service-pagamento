name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - staging

env:
  PROJECT_ID: fiap-3soat-g53
  GAR_LOCATION: us-central1-docker.pkg.dev/fiap-3soat-g53/service-pagamento
  SERVICE: service-pagamento-3soat-g53
  IMAGE: service-pagamento
  REGION: us-central1
  TAG: 'latest'

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # NOTE: Alternative option - authentication via workload_identity_provider
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     token_format: 'access_token'
      #     workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #     service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

# BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)
      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          # username: 'oauth2accesstoken'
          # password: '${{ steps.auth.outputs.access_token }}'
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}
          registry: '${{ env.GAR_LOCATION }}'

      - name: Build and Push Container
        run: |-
          docker build -f devops/docker/Dockerfile -t "${{ env.GAR_LOCATION }}/${{ env.IMAGE }}:${{ env.TAG }}" ./
          docker push "${{ env.GAR_LOCATION }}/${{ env.IMAGE }}:${{ env.TAG }}"
# END - Docker auth and build
